/*
 * Fixed width font for numbers that looks like LCD panel digits
 * This font including pad pixels, will render 12x16 pixels on the display 
 *
 * This font is very useful when using overstrike as all characters & numbers
 * are all the same width.
 *
 * This font is not a complete character set. The font only contains
 * the characters: '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '9', ':'
 *
 * This font is nice for certain applications like clocks, signed values or decimal point values.
 *
 */

GLCDFONTDECL(lcdnums8x16) =
{
  0x0, 0x0,	// size of zero indicates fixed width font
    8,		// width  (will be 12 with pad pixel on right)
    16,		// height (will be 16 with pad pixel on bottom)
    '-',	// first char
    17,		// char count
        
        0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x00,  // -
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .
        0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // /
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        
        0xFE, 0x3D, 0x03, 0x03, 0x03, 0x03, 0x3D, 0xFE,  // Code for char 0 0
        0x1F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x1F,  // Code for char 1

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0xFE,  // Code for char 2 1
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F,  // Code for char 3

        0x80, 0x41, 0xC3, 0xC3, 0xC3, 0xC3, 0xBD, 0x7E,  // Code for char 4 2
        0x1F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x20, 0x00,  // Code for char 5

        0x00, 0x41, 0xC3, 0xC3, 0xC3, 0xC3, 0xBD, 0xFE,  // Code for char 6 3
        0x00, 0x20, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x1F,  // Code for char 7

        0x7E, 0xBC, 0xC0, 0xC0, 0xC0, 0xC0, 0x7C, 0xFE,  // Code for char 8 4
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F,  // Code for char 9

        0x7E, 0xBD, 0xC3, 0xC3, 0xC3, 0xC3, 0x41, 0x80,  // Code for char : 5
        0x00, 0x20, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x1F,  // Code for char ;

        0xFE, 0xBD, 0xC3, 0xC3, 0xC3, 0xC3, 0x41, 0x80,  // Code for char < 6
        0x1F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x1F,  // Code for char =

        0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x3D, 0xFE,  // Code for char > 7
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F,  // Code for char ?

        0xFE, 0x7D, 0xC3, 0xC3, 0xC3, 0xC3, 0xBD, 0xFE,  // Code for char @ 8
        0x1F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x1F,  // Code for char A

        0x7E, 0xBD, 0xC3, 0xC3, 0xC3, 0xC3, 0x7D, 0xFE,  // Code for char B 9
        0x00, 0x20, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x1F,  // Code for char C

        0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,  // Code for char D :
        0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00,  // Code for char E

        0x80, 0x40, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00,  // Code for char F ; c
        0x1F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x20, 0x00,  // Code for char G

        0x7E, 0xBD, 0xC3, 0xC3, 0xC3, 0xC3, 0x41, 0x00,
        0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char < F

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // code for char = space
};
