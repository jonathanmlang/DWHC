#include <main.h>


int fuel_bar_int_old[2]={0};
int fuel_bar_int[2]={0};

byte runstate_old=0;
byte runstate_cur=0;
byte tankstate_old=0;
byte tankstate_cur=0;
byte levelstate_old=0;
byte levelstate_cur=0;


void initdraw(){
  
  oled.setFont(System5x7);
  if (force){ 
    //oled.setFont(lcdnums8x16);
    oled.setCursor(8,2);

    
    oled.print("T1");
    oled.setCursor(26,2);
    oled.print("T2");
    //oled.setCursor(2,3);
    //oled.print("Oil ");
    //oled.setCursor(26,3);
    //oled.print("Fuel");
  }
  
  
  drawbarfuel(0);
  drawbarfuel(1);

  
  

  
    
    //if (menupos==2) drawfulltext(0);
    //else            
    drawfueltext(0);
    


    //if (menupos==4) drawfulltext(1);
    //else            
    drawfueltext(1);

  if (menupos!=5){
    oled.setInvertMode(menupos==3 && (blinker || submenu));
      oled.setCursor(0,0);
      oled.setFont(lcdnums8x16);
      if (t1rat<10) {oled.print('=');} //space
      oled.print(t1rat);
    oled.setInvertMode(0);
      oled.print(':');

    oled.setInvertMode(menupos==4 && (blinker || submenu));
      oled.print(t2rat);
    oled.setInvertMode(0);
      oled.print('='); //space
  }
  
  else{
    oled.setInvertMode(menupos==5 && (blinker || submenu));
      oled.setCursor(0,0);
      oled.setFont(lcdnums8x16);
      byte numlength;
      if (preheat_t/10!=0){
        if (preheat_t/100!=0){
          numlength=0;
        }
        else{numlength=1;}
      }
      else{numlength=2;}
      for(byte zero=0; zero<numlength; zero++){
        oled.print("=");
      }
      oled.print(preheat_t);
      oled.setInvertMode(0);
      oled.print("==");
      oled.setFont(System5x7);
      oled.setCursor(32,1);
      oled.print('s');
  }

  oled.setInvertMode(menupos>=6 && (blinker || submenu));
    oled.setCursor(72,5);
    oled.setFont(System5x7);
    if(menupos==6) oled.print("Setup");
    if(menupos==7){
      oled.print("Clean ");
      //oled.print()
    }
    else oled.print("         ");
  oled.setInvertMode(0);
}



void drawtimeleft(){    // this function also disables the pumps on empty
//hz calc and display
  oled.setInvertMode(0);

  oled.setCursor(1,4);
  //oled.setFont(lcdnums8x16);
  oled.setFont(numerals4x7);
  //oled.set2X();
  
      
  if (tankval[1]>0.0 && nohz<10) {hertz= 1000000/(millis_hz-millis_hz_old);}
               else {hertz=0;}

  if (hertz>9999){hertz=0;}

  //smoothspd=(10000-hertz)/300;

  if (tankval[1]>0 && (!oilout || tankval[0]>0) && (!basic_mode || nohz>=8 || yeshz<10)){ 
    digitalWrite(6,0); //turn on relay ///INVERSED NC RELAY
  }
  else{
    digitalWrite(6,1); //turn off relay
  }

  //unsigned long millis_read=millis();

  if (nohz<10){
    if (nohz==0) oled.print((float)hertz/1000,1); //print hertz input
    //oled.setFont(System5x7);
    nohz++;
    yeshz<10 ? yeshz++ : yeshz;
    //digitalWrite(6,1); //relay on
  }
  else{
    oled.print(";.;");
    //oled.setFont(System5x7);
    preheat_old=millis();  //reset preheat timer
    if (!purge_en){
      digitalWrite(7,0);
      digitalWrite(8,0); //make sure pumps dont get stuck on and burn out
    }
    yeshz>0 ? yeshz-- : yeshz;
  }
  //oled.set1X();
  oled.setCursor(18,4);
  oled.print("FG"); //hz in numerals
  //oled.print(fuel_bar[1]);



  long tankval_i= tankval[0]*1000000; //find lowest tank and multiply out any floating points
  
  int pumpval= (float)pumprate*100000;

  //float lowval;
  
  //convert the ratios to a decimal proportion ie 10:5 becomes 0.66r and 0.33r respectively
  float t1rat_dec= (t1rat + t2rat);
        t1rat_dec= t1rat/ t1rat_dec;
  float t2rat_dec= (t1rat + t2rat);
        t2rat_dec= t2rat/ t2rat_dec;

  // take into account the extra fuel used during a clean cycle and treat it as a ratio ie clean after 10l (tankclean_val) for 500ml (tankclean_amt) 5:100 or 0.0476...
  float cleanrat_dec= (tankclean_val + tankclean_amt);
        cleanrat_dec=  tankclean_amt/ cleanrat_dec;

//=-=-=-=- // between those symbols is the same as below
  int firstop= (pumpval*(hertz/100));       // times pump amount by hertz to find fuel used per second
  float combine_rat1= t1rat_dec-cleanrat_dec; // subtract the cleaning ratio
  float seconop= (float)(firstop)*(float)(combine_rat1);  //times by the ratio to find how much this tank shares with the other
  
  
  long thirop= (tankval_i/seconop)+0.5; // find how many seconds the tank will last based on previous vals and add 0.5 to round in the next op
  int timearrayval= thirop<=0 ? 0 : thirop / 60L;        // round down to nearest minute or set to 0 if below 0
//=-=-=-=-
  
  // average the value worked out over time
  if (arrayval<timearraysize){
    timearray[arrayval]= timearrayval;
    arrayval++;
  }
  else{
    long sum = 0L ;  // sum will be larger than an item, long for safety.
    for (int i = 0 ; i < timearraysize ; i++)
      sum += timearray [i] ;
    timeleft= (sum/timearraysize);
    arrayval=0;
  }
  
  //timeleft is the seconds before tank0 runs out at the current pump speed





  tankval_i= tankval[1]*1000000; //find lowest tank and multiply out any floating points

  long pumpval_2= (float)pumprate_2*100000;
//=-=-=-=-  // between those symbols is the same as above 
  firstop= (pumpval_2*(hertz/100));// * t2rat_dec; 
  float combine_rat2;
  if (t2rat>0){
    combine_rat2= t2rat_dec+cleanrat_dec;
  }
  else{
    combine_rat2= 1.0;
  }
  seconop= (float)(firstop)*(float)(combine_rat2);
  thirop= (tankval_i/seconop)+0.5; // times pump rate gets fuel used per second
  int timearrayval_b=thirop / 60L;
//=-=-=-=-
  
  // average the value worked out
  if (arrayval<timearraysize){
    timearray_b[arrayval]= timearrayval_b;
    arrayval_b++;
  }
  else{
    long sum = 0L ;  // sum will be larger than an item, long for safety.
    for (int i = 0 ; i < timearraysize ; i++)
      sum += timearray_b [i] ;
    timeleft_b= (sum/timearraysize);
    arrayval_b=0;
  }
  int extratime=0;
  int timeleft_c=0;
  int timeleft_tot=0;
  if (t2rat>0){
    if (timeleft_b>timeleft){  // if true, fuel tank is going to last longer than the oil so heater will continue to run on fuel at 1:0 ratio
          extratime= timeleft_b - timeleft; //get the seconds that will be left when oil runs out
          extratime= extratime * t2rat_dec; //divide by the oil ratio decimalized to get the 1:0 ratio
          timeleft_tot= timeleft + extratime;            //add the answer to the time left

          if (set_remtot){
              timeleft_c= extratime;
            }
            else{
              timeleft_c= timeleft_tot;
            }
    }
    else{
      if (set_remtot){
        timeleft_c= timeleft_b;
      }
      else{
        timeleft_c= timeleft_b;
      }
    }
  }
  else{
    timeleft_c=timeleft_b;
  }

   //convert to mins and hours
  int hours_a=   timeleft/60;
  int minutes_a= timeleft%60;

  //convert to mins and hours
  int hours_b=   timeleft_c /60;
  int minutes_b= timeleft_c %60;

  

  //display on the oled
  if (!time_l){          //if time and fuel left L is swapped
      oled.setCursor(103,6);
      oled.setFont(numerals4x7);
      if (timeleft>0 && (timeleft_tot>timeleft || t2rat==0)  && hertz!=0 && tankval[1]!=0.0){
        if (hours_a<10){oled.print("@");}
        oled.print(hours_a);
        oled.print(":");
        if (minutes_a<10){oled.print("0");}
        oled.print(minutes_a);
      }
      else{
        oled.print(";;:;;");
      }

      //display on the oled
      oled.setCursor(103,7);
      if (timeleft_c>0 && hertz!=0 && tankval[1]!=0.0){
        oled.setFont(numerals4x7);
        if (hours_b<10){oled.print("@");}
        oled.print(hours_b);
        oled.print(":");
        if (minutes_b<10){oled.print("0");}
        oled.print(minutes_b);
      }
      else{
        oled.print(";;:;;");
      }

  }
  else{
      oled.setCursor(78,0);
      oled.setFont(lcdnums8x16);
      if (timeleft>0 && timeleft_tot>timeleft  && hertz!=0 && tankval[1]!=0.0){
        if (hours_a<10){oled.print("=");}
        oled.print(hours_a);
        oled.print(":");
        if (minutes_a<10){oled.print("0");}
        oled.print(minutes_a);
      }
      else{
        oled.print("--:--");
      }

      //display on the oled
      oled.setCursor(78,2);
      if (timeleft_c>0 && hertz!=0 && tankval[1]!=0.0){
        
        if (hours_b<10){oled.print("=");}
        oled.print(hours_b);
        oled.print(":");
        if (minutes_b<10){oled.print("0");}
        oled.print(minutes_b);
      }
      else{
        oled.print("--:--");
      }

      oled.setCursor(125,1);
      oled.setFont(numerals4x7);
      oled.print("J"); //H

      oled.setCursor(125,3);
      oled.print("J"); //H

  }
}

bool waspreheat=0;

void initfn(){

  //fuel only until preheat time
unsigned int timesincepump= (millis()-preheat_old)/1000;
timedel= timesincepump>preheat_t ? 0 : 1 ;

// print preheat time left
if (timedel && runstate_cur==PREHEAT){
  oled.setCursor(80,4);
  oled.print(preheat_t-timesincepump);
  oled.print("s    ");
  waspreheat=1;
}
else{
  if (waspreheat){
    oled.setCursor(80,4);
    oled.print("   ");
    waspreheat=0;
  }
}

// if fuel is below 100ml, fuel only to clean burner
// or if oil runs out, use fuel only
runout= (tankval[1]<runout_val || tankval[0]<=0) ? 1 : 0 ;
unsigned long tanktotal_int = tanktotal_1;
if (tankclean_amt<=0 && tankclean_val<=0) tankclean_en=0;
else tankclean_en= (tanktotal_int % ((unsigned)tankclean_val + (unsigned)tankclean_amt) > (unsigned)tankclean_val) && tankval[0]>0.0 ? 1 : 0 ;

//oled.setCursor(80,5);
//oled.print(digitalRead(6));
//oled.print(yeshz);

}

int fuel_bar_low_ex[2]={0};

void drawbarfuel(byte tank){

    byte barlength= 86;
    

    float bar_low_level= tankmax[tank]/100;
          bar_low_level= bar_low_level*(float)bar_low_perc;
    
    float bar_multiplier= (float) tankmax[tank] / (float) barlength;

    fuel_bar[tank]= tankval[tank] / bar_multiplier;
    int fuel_bar_low= (bar_low_level / bar_multiplier)+1;
    fuel_bar_low_ex[tank]= fuel_bar_low;

    fuel_bar_int[tank]= fuel_bar[tank];

    
    
    
    if ((menuselect==0 && fuel_bar_int[tank]!=fuel_bar_int_old[tank]) || (menuselect==0 && force)){
        oled.setFont(System5x7);
        oled.setCursor(0,6+tank);
        oled.print('T'); //fuel icon

        oled.print(tank+1);

        oled.setFont(bargraph);
        oled.setCursor(12,6+tank);
        
        for (byte a=0; a<=barlength; a++){
            if (a==0 || a==barlength){oled.print('b');}
            else{
            if ((a< fuel_bar[tank] && (tankval[tank]>fuel_bar_low || blinker)) || a==0 || a==barlength) {
                if (a!=fuel_bar_low) {oled.print('a');}
                else      {oled.print('b');}
                }
            else{
                if (a!=fuel_bar_low) {oled.print('d');}
                else      {oled.print('e');}
                }
            }
        }
      fuel_bar_int_old[tank]= fuel_bar_int[tank];
    }

    if (fuel_bar[0] <= fuel_bar_low || fuel_bar[1] <= fuel_bar_low){
      if (tankval[0]!=0 && tankval[1]!=0) {digitalWrite(A0,blinker);}
      else                                {digitalWrite(A0,1);}
    }
    else{
      digitalWrite(A0,0);
    }
}    

int tankval_int_old[2]={0};

void drawfueltext(byte tank){

  tankval_int[tank]=(int)(tankval[tank]);

  if (force){
    oled.setCursor(62,1+tank*2);
    oled.setFont(System5x7);
    oled.print('T'); //fuel icon
    oled.print(tank+1);
    oled.setCursor(50,0+tank*2);
    oled.print(tank ? "Fuel" : " Oil");
  }

  if (tankval_int[tank]!=tankval_int_old[tank] || force || menupos==1 || menupos==2){

    oled.setInvertMode((menupos==1+tank) && (blinker || submenu));
    if (!time_l){  
      oled.setCursor(76,0+tank*2);
      oled.setFont(lcdnums8x16);
      if (tankval_int[tank]<1000){oled.print('=');} //space
      oled.print(tankval_int[tank] /100);
      oled.print('.'); //.
      if (tankval_int[tank] %100<10){oled.print(0);}
      oled.print(tankval_int[tank] %100);
      oled.setInvertMode(0);
      oled.set1X();
      oled.setCursor(124,0+(tank*2)+1);
      oled.setFont(numerals4x7);
      oled.print("E"); //L
    }
    else{
      oled.setCursor(103,6+tank);
      oled.setFont(numerals4x7);
      if (tankval_int[tank]<1000){oled.print('@');} //space
      oled.print(tankval_int[tank] /100);
      oled.print('.'); //.
      if (tankval_int[tank] %100<10){oled.print(0);}
      oled.print(tankval_int[tank] %100);
      oled.setInvertMode(0);
    }
  }

}

void drawfulltext(byte tank){

    oled.setCursor(56,0+tank*2);
    oled.setFont(System5x7);
    oled.print('T'); //fuel icon
    oled.print(tank+1);
    oled.setCursor(56,1+tank*2);
    oled.print("MX");

    oled.setCursor(68,0+tank*2);

    oled.setFont(lcdnums8x16);
    if (tankmax[tank]<1000){oled.print('=');} //space
    oled.print(tankmax[tank] /100);
    oled.print('.');
    if (tankmax[tank] %100<10){oled.print(0);}
    oled.print(tankmax[tank] %100);
    oled.setFont(System5x7);
    oled.set2X();
    oled.setFont(bargraph);
    oled.print("jj");
    oled.setFont(System5x7);
    oled.print("L "); //L
    oled.set1X();
    

}



void printstate(byte val){

  switch(val){
    case RUN:       oled.print("RUN");        break;
    case PREHEAT:   oled.print("PREHEAT");    break;
    case IDLE:      oled.print("IDLE");       break;
    case OIL:       oled.print("OIL");        break;
    case FUEL:      oled.print("FUEL");       break;
    case BOTH:      oled.print("BOTH");       break;
    case PURGE:     oled.print("PURGE");      break;
    case EMPTY:     oled.print("EMPTY");      break;
    case LOWW:      oled.print("LOW");        break;
    case CLEAN:     oled.print("CLEAN");      break;
    case INVALID:   oled.print("---  ");      break;
    case NONE:                                break;
  }

}



void printstate_val(){

  oled.setFont(System5x7);
  oled.setCursor(30,4);

    if (hertz>0){
      if (timedel  && !tankclean_en) runstate_cur= PREHEAT;
      if (timedel  &&  tankclean_en) runstate_cur= PREHEAT;
      if (!timedel &&  tankclean_en) runstate_cur= CLEAN;
      if (!timedel && !tankclean_en) runstate_cur= RUN;
    }
    else if (nohz>=5){
      if (purge_oil_set>0){
        if (purge_oil_val==0 && runstate_cur==RUN){
            purge_en=1;
            runstate_cur=PURGE;
        }
      }
      if (purge_oil_val>=purge_oil_set || runstate_cur==PREHEAT){
        purge_en=0;
        purge_oil_val=0;
        runstate_cur = IDLE;

      }
    }

    if (runstate_old!=runstate_cur || force){
      oled.print("       ");
      oled.setCursor(30,4);
      printstate(runstate_cur);
      runstate_old= runstate_cur;
    }


    oled.setCursor(30,5);
    

    if (fuel_bar_int[0]<=fuel_bar_low_ex[0] || fuel_bar_int[1]<=fuel_bar_low_ex[1]){
        if (tankval[0]>0 && tankval[1]>0){  //check if a tank is not empty
          tankstate_cur= LOWW;
          
        }
        else{
          tankstate_cur= EMPTY;   //print empty if a tank is empty
        }

        if ((fuel_bar_int[0]<=fuel_bar_low_ex[0] && fuel_bar_int[1]<=fuel_bar_low_ex[1] && tankstate_cur!=EMPTY) || ( tankval[0]<=0 && tankval[1]<=0) ){
          levelstate_cur= BOTH;
        }
        else{
          if ((fuel_bar_int[0]<=fuel_bar_low_ex[0] && tankstate_cur!=EMPTY) || tankval[0]<=0){
            levelstate_cur= OIL;
          }
          if ((fuel_bar_int[1]<=fuel_bar_low_ex[1] && tankstate_cur!=EMPTY) || tankval[1]<=0){
            levelstate_cur= FUEL;
          }
          
        }
    }
    else{
      tankstate_cur= NONE;
      levelstate_cur= NONE;
    }


    if (tankstate_old!=tankstate_cur || force){
      oled.print("     ");
      oled.setCursor(30,5);
      printstate(tankstate_cur);
      tankstate_old= tankstate_cur;
      //levelstate_old=0;
      
    }

    if (levelstate_old!=levelstate_cur || force){
      oled.setCursor(60,5);
      oled.print("     ");
      oled.setCursor(60,5);
      printstate(levelstate_cur);
      levelstate_old= levelstate_cur;
      tankstate_old=0;
    }

    //end:;

}

    

    











  



